diff --git a/node_modules/@shopify/hydrogen/dist/development/index.js b/node_modules/@shopify/hydrogen/dist/development/index.js
index 4ea2dc1..1771ece 100644
--- a/node_modules/@shopify/hydrogen/dist/development/index.js
+++ b/node_modules/@shopify/hydrogen/dist/development/index.js
@@ -29,7 +29,11 @@ function AnalyticsView(props) {
     shop
   };
   useEffect(() => {
-    if (!shop?.shopId) return;
+    console.log("[h2:debug:AnalyticsView] - Publishing view event", type, viewPayload2);
+    if (!shop?.shopId) {
+      console.error('[h2:error:AnalyticsView] - shopId is required for analytics events. Make sure to pass the shop prop to <Analytics.Provider> or use <Analytics.Provider shop={shop}>.');
+      return;
+    }
     viewPayload2 = {
       ...viewPayload2,
       url: window.location.href
@@ -230,8 +234,10 @@ function useApisLoaded({
   const setLoaded = {
     customerPrivacy: () => {
       if (withPrivacyBanner) {
+        console.log('Customer Privacy API loaded');
         setApisLoaded((prev) => [true, prev[1]]);
       } else {
+        console.log('Customer Privacy API loaded without Privacy Banner');
         setApisLoaded(() => [true]);
       }
     },
@@ -239,6 +245,7 @@ function useApisLoaded({
       if (!withPrivacyBanner) {
         return;
       }
+      console.log('Privacy Banner API loaded');
       setApisLoaded((prev) => [prev[0], true]);
     }
   };
@@ -346,8 +353,14 @@ function ShopifyAnalytics({
     locale: language,
     checkoutDomain: !checkoutDomain ? "mock.shop" : checkoutDomain,
     storefrontAccessToken: !storefrontAccessToken ? "abcdefghijklmnopqrstuvwxyz123456" : storefrontAccessToken,
-    onVisitorConsentCollected: () => setPrivacyReady(true),
-    onReady: () => setPrivacyReady(true)
+    onVisitorConsentCollected: () => {
+      setPrivacyReady(true)
+      console.log('useCustomerPrivacy: Customer Privacy API loaded, onVisitorConsentCollected called');
+    },
+    onReady: () => {
+      console.log('useCustomerPrivacy: Customer Privacy API loaded, onReady called');
+      setPrivacyReady(true)
+    }
   });
   useShopifyCookies({
     hasUserConsent: privacyReady ? canTrack() : true,
@@ -357,18 +370,23 @@ function ShopifyAnalytics({
   });
   useEffect(() => {
     if (init.current) return;
+
     init.current = true;
     subscribe2(AnalyticsEvent.PAGE_VIEWED, pageViewHandler);
     subscribe2(AnalyticsEvent.PRODUCT_VIEWED, productViewHandler);
     subscribe2(AnalyticsEvent.COLLECTION_VIEWED, collectionViewHandler);
     subscribe2(AnalyticsEvent.SEARCH_VIEWED, searchViewHandler);
     subscribe2(AnalyticsEvent.PRODUCT_ADD_TO_CART, productAddedToCartHandler);
+    console.log('ShopifyAnalytics: Subscribed to analytics events, initialized');
     setShopifyReady(true);
   }, [subscribe2]);
   useEffect(() => {
     if (shopifyReady && privacyReady) {
       shopifyAnalyticsReady();
       onReady();
+      console.log(
+        'ShopifyAnalytics: Shopify Analytics API loaded'
+      )
     }
   }, [shopifyReady, privacyReady, onReady]);
   return null;
@@ -716,6 +734,7 @@ function PerfKit({ shop }) {
     if (scriptStatus !== "done" || loadedEvent.current) return;
     loadedEvent.current = true;
     subscribe2(AnalyticsEvent.PAGE_VIEWED, () => {
+      console.log("[h2:debug:PerfKit] - Page viewed event received, navigating PerfKit");
       window.PerfKit?.navigate();
     });
     subscribe2(AnalyticsEvent.PRODUCT_VIEWED, () => {
@@ -781,6 +800,7 @@ function subscribe(event, callback) {
 }
 var waitForReadyQueue = /* @__PURE__ */ new Map();
 function publish(event, payload) {
+  console.log('publish: areRegistersReady()?', areRegistersReady());
   if (!areRegistersReady()) {
     waitForReadyQueue.set(event, payload);
     return;
@@ -790,6 +810,7 @@ function publish(event, payload) {
 function publishEvent(event, payload) {
   (subscribers.get(event) ?? /* @__PURE__ */ new Map()).forEach((callback, subscriber) => {
     try {
+      console.log(`publishEvent: ${event} to ${subscriber}`);
       callback(payload);
     } catch (error) {
       if (typeof error === "object" && error instanceof Error) {
@@ -811,6 +832,7 @@ function register(key) {
   }
   return {
     ready: () => {
+      console.log(`register: ${key} is ready`);
       registers[key] = true;
       if (areRegistersReady() && waitForReadyQueue.size > 0) {
         waitForReadyQueue.forEach((queuePayload, queueEvent) => {
@@ -847,7 +869,14 @@ function AnalyticsProvider({
   );
   const [carts, setCarts] = useState({ cart: null, prevCart: null });
   const [canTrack, setCanTrack] = useState(
-    customCanTrack ? () => customCanTrack : () => shopifyCanTrack
+    customCanTrack ? () => customCanTrack : () => function shopifyCanTrack() {
+      try {
+        return window.Shopify.customerPrivacy.analyticsProcessingAllowed();
+      } catch (e) {
+        console.error('[h2:error:Analytics.Provider:shopifyCanTrack] - Shopify Customer Privacy API not yet available.');
+      }
+      return false;
+    }
   );
   if (!!shop) {
     if (/\/68817551382$/.test(shop.shopId)) {
@@ -886,6 +915,7 @@ function AnalyticsProvider({
       ...carts,
       customData,
       publish: canTrack() ? publish : () => {
+        console.log('AnalyticsProvider: publish is no-op because canTrack is', canTrack());
       },
       shop,
       subscribe,
@@ -908,6 +938,17 @@ function AnalyticsProvider({
     getCustomerPrivacy,
     getPrivacyBanner
   ]);
+    // listen to shopifyCustomerPrivacyApiLoaded custom event
+  useEffect(() => {
+    window.addEventListener('shopifyCustomerPrivacyApiLoaded', () => {
+      console.log('--> privacy api loaded event');
+    });
+    return () => {
+      window.removeEventListener('shopifyCustomerPrivacyApiLoaded', () => {
+        console.log('--> privacy api loaded event removed');
+      });
+    };
+  }, []);
   return /* @__PURE__ */ jsxs(AnalyticsContext.Provider, { value, children: [
     children,
     !!shop && /* @__PURE__ */ jsx(AnalyticsPageView, {}),
@@ -918,7 +959,10 @@ function AnalyticsProvider({
         consent,
         onReady: () => {
           listenerSet.current = true;
-          setAnalyticsLoaded(true);
+          setTimeout(() => {
+            console.log('ShopifyAnalytics:onReady shopifyCanTrack', typeof shopifyCanTrack, shopifyCanTrack());
+            setAnalyticsLoaded(true);
+          }, 50)
           setCanTrack(
             customCanTrack ? () => customCanTrack : () => shopifyCanTrack
           );
