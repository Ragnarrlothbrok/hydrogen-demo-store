diff --git a/node_modules/@shopify/hydrogen/dist/development/index.js b/node_modules/@shopify/hydrogen/dist/development/index.js
index 4ea2dc1..2982a6f 100644
--- a/node_modules/@shopify/hydrogen/dist/development/index.js
+++ b/node_modules/@shopify/hydrogen/dist/development/index.js
@@ -86,6 +86,8 @@ function useCustomerPrivacy(props) {
     onReady,
     ...consentConfig
   } = props;
+  const {register: register2} = useAnalytics();
+  const {ready: customerPrivacyReady} = register2('Customer_Privacy');
   useLoadScript(withPrivacyBanner ? CONSENT_API_WITH_BANNER : CONSENT_API, {
     attributes: {
       id: "customer-privacy-api"
@@ -93,8 +95,15 @@ function useCustomerPrivacy(props) {
   });
   const { observing, setLoaded } = useApisLoaded({
     withPrivacyBanner,
-    onLoaded: onReady
+    onLoaded: (event) => {
+      setTimeout(() => {
+        onReady(event);
+        customerPrivacyReady();
+      }, 10);
+    },
+
   });
+
   const config = useMemo(() => {
     const { checkoutDomain, storefrontAccessToken } = consentConfig;
     if (!checkoutDomain) logMissingConfig("checkoutDomain");
@@ -130,6 +139,35 @@ function useCustomerPrivacy(props) {
       );
     };
   }, [onVisitorConsentCollected]);
+  useEffect(() => {
+    if (!withPrivacyBanner) return;
+    function loadBanner() {
+      console.log(
+        '[debug:useCustomerPrivacy] - loadBanner',
+        config,
+        window?.privacyBanner,
+      );
+
+      if (!window?.privacyBanner) {
+        console.error(
+          '[h2:error:useCustomerPrivacy] - Privacy Banner API is not loaded. Make sure to use the `withPrivacyBanner` option.',
+        );
+      } else {
+        console.log(
+          '[debug:useCustomerPrivacy] - loadBanner called with config',
+          config,
+        );
+        window.privacyBanner.loadBanner(config);
+      }
+    }
+    document.addEventListener('shopifyCustomerPrivacyApiLoaded', loadBanner);
+    return () => {
+      document.removeEventListener(
+        'shopifyCustomerPrivacyApiLoaded',
+        loadBanner,
+      );
+    };
+  }, [withPrivacyBanner, config, window, window?.privacyBanner]);
   useEffect(() => {
     if (!withPrivacyBanner || observing.current.privacyBanner) return;
     observing.current.privacyBanner = true;
@@ -148,7 +186,7 @@ function useCustomerPrivacy(props) {
             config
           });
           setLoaded.privacyBanner();
-          emitCustomerPrivacyApiLoaded();
+          emitPrivacyBannerApiLoaded();
         }
       }
     };
@@ -188,7 +226,10 @@ function useCustomerPrivacy(props) {
                 };
                 customShopify = {
                   ...customShopify,
-                  customerPrivacy: customCustomerPrivacy
+                  customerPrivacy: customCustomerPrivacy,
+                  country: config.country,
+                  locale: config.locale,
+                  accessToken: config.storefrontAccessToken,
                 };
                 setLoaded.customerPrivacy();
                 emitCustomerPrivacyApiLoaded();
@@ -212,12 +253,31 @@ function useCustomerPrivacy(props) {
   return result;
 }
 var hasEmitted = false;
+var hasEmittedBanner = false;
+
 function emitCustomerPrivacyApiLoaded() {
   if (hasEmitted) return;
   hasEmitted = true;
   const event = new CustomEvent("shopifyCustomerPrivacyApiLoaded");
   document.dispatchEvent(event);
 }
+
+function emitPrivacyBannerApiLoaded() {
+  console.log(
+    '[debug:emitPrivacyBannerApiLoaded] - emitPrivacyBannerApiLoaded hasEmitted',
+    hasEmittedBanner,
+  );
+  if (hasEmittedBanner) return;
+  hasEmittedBanner = true;
+  setTimeout(() => {
+    const event = new CustomEvent('emitPrivacyBannerApiLoaded', {
+      bubbles: true,
+      cancelable: true,
+    });
+    document.dispatchEvent(event);
+  }, 100);
+}
+
 function useApisLoaded({
   withPrivacyBanner,
   onLoaded
