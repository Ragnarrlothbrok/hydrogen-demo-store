diff --git a/node_modules/@shopify/hydrogen/dist/development/index.js b/node_modules/@shopify/hydrogen/dist/development/index.js
index 4ea2dc1..0c08412 100644
--- a/node_modules/@shopify/hydrogen/dist/development/index.js
+++ b/node_modules/@shopify/hydrogen/dist/development/index.js
@@ -29,7 +29,11 @@ function AnalyticsView(props) {
     shop
   };
   useEffect(() => {
-    if (!shop?.shopId) return;
+    console.log("[h2:debug:AnalyticsView] - Publishing view event", type, viewPayload2);
+    if (!shop?.shopId) {
+      console.error('[h2:error:AnalyticsView] - shopId is required for analytics events. Make sure to pass the shop prop to <Analytics.Provider> or use <Analytics.Provider shop={shop}>.');
+      return;
+    }
     viewPayload2 = {
       ...viewPayload2,
       url: window.location.href
@@ -80,21 +84,34 @@ function logMissingConfig(fieldName) {
   );
 }
 function useCustomerPrivacy(props) {
+  const { subscribe: subscribe2, register: register2, canTrack } = useAnalytics();
+  const { ready: customerPrivacyReady } = register2("Customer_Privacy");
   const {
     withPrivacyBanner = false,
     onVisitorConsentCollected,
     onReady,
     ...consentConfig
   } = props;
-  useLoadScript(withPrivacyBanner ? CONSENT_API_WITH_BANNER : CONSENT_API, {
+  const status = useLoadScript(withPrivacyBanner ? CONSENT_API_WITH_BANNER : CONSENT_API, {
     attributes: {
       id: "customer-privacy-api"
     }
   });
+  console.log('[debug:useCustomerPrivacy] - useLoadScript status:', status);
   const { observing, setLoaded } = useApisLoaded({
     withPrivacyBanner,
-    onLoaded: onReady
+    onLoaded: (event) => {
+      onReady(event)
+    }
   });
+  function emitCustomerPrivacyApiLoaded() {
+    if (hasEmitted) return;
+    hasEmitted = true;
+    const event = new CustomEvent("shopifyCustomerPrivacyApiLoaded", {bubbles: true, cancelable: true});
+    document.dispatchEvent(event);
+    console.log('[debug:useCustomerPrivacy] - Emitting shopifyCustomerPrivacyApiLoaded event');
+    customerPrivacyReady()
+  }
   const config = useMemo(() => {
     const { checkoutDomain, storefrontAccessToken } = consentConfig;
     if (!checkoutDomain) logMissingConfig("checkoutDomain");
@@ -157,9 +174,11 @@ function useCustomerPrivacy(props) {
     withPrivacyBanner,
     config,
     overridePrivacyBannerMethods,
-    setLoaded.privacyBanner
+    setLoaded.privacyBanner,
+    status
   ]);
   useEffect(() => {
+    console.log('[debug:useCustomerPrivacy] - useEffect: Observing customerPrivacy', window?.Shopify);
     if (observing.current.customerPrivacy) return;
     observing.current.customerPrivacy = true;
     let customCustomerPrivacy = null;
@@ -183,26 +202,28 @@ function useCustomerPrivacy(props) {
                 customCustomerPrivacy = {
                   ...customerPrivacy,
                   setTrackingConsent: overrideCustomerPrivacySetTrackingConsent(
-                    { customerPrivacy, config }
-                  )
-                };
-                customShopify = {
-                  ...customShopify,
-                  customerPrivacy: customCustomerPrivacy
-                };
-                setLoaded.customerPrivacy();
-                emitCustomerPrivacyApiLoaded();
-              }
+                  { customerPrivacy, config }
+                )
+              };
+              customShopify = {
+                ...customShopify,
+                customerPrivacy: customCustomerPrivacy
+              };
+              setLoaded.customerPrivacy();
+              emitCustomerPrivacyApiLoaded();
             }
-          });
-        }
+          }
+        });
       }
-    });
-  }, [
-    config,
-    overrideCustomerPrivacySetTrackingConsent,
-    setLoaded.customerPrivacy
-  ]);
+    }
+  });
+}, [
+  config,
+  overrideCustomerPrivacySetTrackingConsent,
+  setLoaded.customerPrivacy,
+  emitCustomerPrivacyApiLoaded,
+  status
+]);
   const result = {
     customerPrivacy: getCustomerPrivacy()
   };
@@ -212,12 +233,6 @@ function useCustomerPrivacy(props) {
   return result;
 }
 var hasEmitted = false;
-function emitCustomerPrivacyApiLoaded() {
-  if (hasEmitted) return;
-  hasEmitted = true;
-  const event = new CustomEvent("shopifyCustomerPrivacyApiLoaded");
-  document.dispatchEvent(event);
-}
 function useApisLoaded({
   withPrivacyBanner,
   onLoaded
@@ -230,8 +245,10 @@ function useApisLoaded({
   const setLoaded = {
     customerPrivacy: () => {
       if (withPrivacyBanner) {
+        console.log('useApisLoaded: Customer Privacy API loaded');
         setApisLoaded((prev) => [true, prev[1]]);
       } else {
+        console.log('useApisLoaded: Customer Privacy API loaded without Privacy Banner');
         setApisLoaded(() => [true]);
       }
     },
@@ -239,6 +256,7 @@ function useApisLoaded({
       if (!withPrivacyBanner) {
         return;
       }
+      console.log('useApisLoaded: Privacy Banner API loaded');
       setApisLoaded((prev) => [prev[0], true]);
     }
   };
@@ -346,8 +364,14 @@ function ShopifyAnalytics({
     locale: language,
     checkoutDomain: !checkoutDomain ? "mock.shop" : checkoutDomain,
     storefrontAccessToken: !storefrontAccessToken ? "abcdefghijklmnopqrstuvwxyz123456" : storefrontAccessToken,
-    onVisitorConsentCollected: () => setPrivacyReady(true),
-    onReady: () => setPrivacyReady(true)
+    onVisitorConsentCollected: () => {
+      setPrivacyReady(true)
+      console.log('useCustomerPrivacy: Customer Privacy API loaded, onVisitorConsentCollected called');
+    },
+    onReady: () => {
+      console.log('useCustomerPrivacy: Customer Privacy API loaded, onReady called');
+      setPrivacyReady(true)
+    }
   });
   useShopifyCookies({
     hasUserConsent: privacyReady ? canTrack() : true,
@@ -357,18 +381,24 @@ function ShopifyAnalytics({
   });
   useEffect(() => {
     if (init.current) return;
+
     init.current = true;
     subscribe2(AnalyticsEvent.PAGE_VIEWED, pageViewHandler);
     subscribe2(AnalyticsEvent.PRODUCT_VIEWED, productViewHandler);
     subscribe2(AnalyticsEvent.COLLECTION_VIEWED, collectionViewHandler);
     subscribe2(AnalyticsEvent.SEARCH_VIEWED, searchViewHandler);
     subscribe2(AnalyticsEvent.PRODUCT_ADD_TO_CART, productAddedToCartHandler);
+    console.log('ShopifyAnalytics: Subscribed to analytics events, initialized');
     setShopifyReady(true);
   }, [subscribe2]);
   useEffect(() => {
+    console.lo('ShopifyAnalytics: useEffect - shopifyReady', shopifyReady, 'privacyReady', privacyReady);
     if (shopifyReady && privacyReady) {
       shopifyAnalyticsReady();
       onReady();
+      console.log(
+        'ShopifyAnalytics: Shopify Analytics API loaded'
+      )
     }
   }, [shopifyReady, privacyReady, onReady]);
   return null;
@@ -716,6 +746,7 @@ function PerfKit({ shop }) {
     if (scriptStatus !== "done" || loadedEvent.current) return;
     loadedEvent.current = true;
     subscribe2(AnalyticsEvent.PAGE_VIEWED, () => {
+      console.log("[h2:debug:PerfKit] - Page viewed event received, navigating PerfKit");
       window.PerfKit?.navigate();
     });
     subscribe2(AnalyticsEvent.PRODUCT_VIEWED, () => {
@@ -756,6 +787,7 @@ var defaultAnalyticsContext = {
   customData: {},
   prevCart: null,
   publish: () => {
+    console.log('defaultAnalyticsContext: publish is no-op because canTrack is no-op by default');
   },
   shop: null,
   subscribe: () => {
@@ -776,12 +808,16 @@ function areRegistersReady() {
 function subscribe(event, callback) {
   if (!subscribers.has(event)) {
     subscribers.set(event, /* @__PURE__ */ new Map());
+    console.log(`subscribe: created new event ${event} in subscribers map`);
   }
+  console.log(`subscribe: adding callback for event ${event}`, callback.toString());
   subscribers.get(event)?.set(callback.toString(), callback);
 }
 var waitForReadyQueue = /* @__PURE__ */ new Map();
 function publish(event, payload) {
+  console.log('actual publish: areRegistersReady()?', areRegistersReady());
   if (!areRegistersReady()) {
+    console.log(`publish: ${event} is waiting for registers to be ready`);
     waitForReadyQueue.set(event, payload);
     return;
   }
@@ -790,6 +826,7 @@ function publish(event, payload) {
 function publishEvent(event, payload) {
   (subscribers.get(event) ?? /* @__PURE__ */ new Map()).forEach((callback, subscriber) => {
     try {
+      console.log(`publishEvent: ${event}`)
       callback(payload);
     } catch (error) {
       if (typeof error === "object" && error instanceof Error) {
@@ -800,7 +837,7 @@ function publishEvent(event, payload) {
           error.stack
         );
       } else {
-        console.error("Analytics publish error", error, subscriber);
+        console.error("publishEvent: Analytics publish error", error, subscriber);
       }
     }
   });
@@ -812,12 +849,17 @@ function register(key) {
   return {
     ready: () => {
       registers[key] = true;
+      console.log(`registered: ${key} is ready publishing events`, waitForReadyQueue.size, 'events in queue');
+
       if (areRegistersReady() && waitForReadyQueue.size > 0) {
         waitForReadyQueue.forEach((queuePayload, queueEvent) => {
           publishEvent(queueEvent, queuePayload);
         });
         waitForReadyQueue.clear();
+      } else {
+        console.log(`registered: ${key} is ready no events to publish`);
       }
+
     }
   };
 }
@@ -847,7 +889,9 @@ function AnalyticsProvider({
   );
   const [carts, setCarts] = useState({ cart: null, prevCart: null });
   const [canTrack, setCanTrack] = useState(
-    customCanTrack ? () => customCanTrack : () => shopifyCanTrack
+    customCanTrack
+      ? () => customCanTrack
+      : () => shopifyCanTrack
   );
   if (!!shop) {
     if (/\/68817551382$/.test(shop.shopId)) {
@@ -880,34 +924,51 @@ function AnalyticsProvider({
       }
     }
   }
-  const value = useMemo(() => {
-    return {
-      canTrack,
-      ...carts,
-      customData,
-      publish: canTrack() ? publish : () => {
-      },
-      shop,
-      subscribe,
-      register,
-      customerPrivacy: getCustomerPrivacy(),
-      privacyBanner: getPrivacyBanner()
-    };
-  }, [
-    analyticsLoaded,
+  function getCustomerPrivacy() {
+    try {
+      return window.Shopify && window.Shopify.customerPrivacy ? window.Shopify?.customerPrivacy : null;
+    } catch (e) {
+      return null;
+    }
+  }
+  function getPrivacyBanner() {
+    try {
+      return window && window?.privacyBanner ? window.privacyBanner : null;
+    } catch (e) {
+      return null;
+    }
+  }
+
+  const p = canTrack() ? publish : () => {
+    console.log('AnalyticsProvider: publish is no-op because canTrack is', canTrack());
+  }
+
+  const value = {
     canTrack,
-    carts,
-    carts.cart?.updatedAt,
-    carts.prevCart,
-    publish,
-    subscribe,
+    ...carts,
     customData,
+    publish: p,
     shop,
+    subscribe,
     register,
-    JSON.stringify(registers),
-    getCustomerPrivacy,
-    getPrivacyBanner
-  ]);
+    customerPrivacy: getCustomerPrivacy(),
+    privacyBanner: getPrivacyBanner()
+  }
+  console.log('-------------------------')
+  console.log(JSON.stringify(value))
+  console.log('-------------------------')
+
+  // listen to shopifyCustomerPrivacyApiLoaded custom event
+  useEffect(() => {
+    function shopifyCustomerPrivacyApiLoaded(event) {
+      console.log('--> privacy api loaded event', event);
+    }
+    window.addEventListener('shopifyCustomerPrivacyApiLoaded', shopifyCustomerPrivacyApiLoaded);
+
+    return () => {
+      window.removeEventListener('shopifyCustomerPrivacyApiLoaded', shopifyCustomerPrivacyApiLoaded);
+    }
+  }, []);
   return /* @__PURE__ */ jsxs(AnalyticsContext.Provider, { value, children: [
     children,
     !!shop && /* @__PURE__ */ jsx(AnalyticsPageView, {}),
@@ -918,9 +979,12 @@ function AnalyticsProvider({
         consent,
         onReady: () => {
           listenerSet.current = true;
+          console.log('ShopifyAnalytics:onReady shopifyCanTrack', typeof shopifyCanTrack, shopifyCanTrack());
           setAnalyticsLoaded(true);
           setCanTrack(
-            customCanTrack ? () => customCanTrack : () => shopifyCanTrack
+            customCanTrack
+              ? () => customCanTrack
+              : () => shopifyCanTrack
           );
         },
         domain: cookieDomain
